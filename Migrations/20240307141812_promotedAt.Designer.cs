// <auto-generated />
using System;
using Artportable.API.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Artportable.API.Migrations
{
    [DbContext(typeof(APContext))]
    [Migration("20240307141812_promotedAt")]
    partial class promotedAt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Artportable.API.Entities.Models.Artwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("currency");

                    b.Property<decimal?>("Depth")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("depth");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("description");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("height");

                    b.Property<bool>("MultipleSizes")
                        .HasColumnType("bit")
                        .HasColumnName("multiple_sizes");

                    b.Property<int?>("OrderIndex")
                        .HasColumnType("int")
                        .HasColumnName("order_index");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<int?>("PrimaryFileId")
                        .HasColumnType("int")
                        .HasColumnName("primary_file_id");

                    b.Property<bool?>("Promoted")
                        .HasColumnType("bit")
                        .HasColumnName("promoted");

                    b.Property<DateTime?>("PromotedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("promoted_at");

                    b.Property<int?>("PromotionDaysRemaining")
                        .HasColumnType("int")
                        .HasColumnName("promotion_days_remaining");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("public_id");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2")
                        .HasColumnName("published");

                    b.Property<int?>("SecondaryFileId")
                        .HasColumnType("int")
                        .HasColumnName("secondary_file_id");

                    b.Property<bool>("SoldOut")
                        .HasColumnType("bit")
                        .HasColumnName("sold_out");

                    b.Property<int?>("TertiaryFileId")
                        .HasColumnType("int")
                        .HasColumnName("tertiary_file_id");

                    b.Property<string>("Title")
                        .HasMaxLength(240)
                        .HasColumnType("nvarchar(240)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<decimal?>("Width")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_artworks");

                    b.HasIndex("PrimaryFileId")
                        .IsUnique()
                        .HasDatabaseName("ix_artworks_primary_file_id")
                        .HasFilter("[primary_file_id] IS NOT NULL");

                    b.HasIndex("PublicId")
                        .HasDatabaseName("ix_artworks_public_id");

                    b.HasIndex("SecondaryFileId")
                        .IsUnique()
                        .HasDatabaseName("ix_artworks_secondary_file_id")
                        .HasFilter("[secondary_file_id] IS NOT NULL");

                    b.HasIndex("TertiaryFileId")
                        .IsUnique()
                        .HasDatabaseName("ix_artworks_tertiary_file_id")
                        .HasFilter("[tertiary_file_id] IS NOT NULL");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_artworks_user_id");

                    b.ToTable("artworks");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.Connection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FolloweeId")
                        .HasColumnType("int")
                        .HasColumnName("followee_id");

                    b.Property<int>("FollowerId")
                        .HasColumnType("int")
                        .HasColumnName("follower_id");

                    b.HasKey("Id")
                        .HasName("pk_connections");

                    b.HasIndex("FolloweeId")
                        .HasDatabaseName("ix_connections_followee_id");

                    b.HasIndex("FollowerId")
                        .HasDatabaseName("ix_connections_follower_id");

                    b.ToTable("connections");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("From")
                        .HasColumnType("int")
                        .HasColumnName("from");

                    b.Property<string>("Name")
                        .HasColumnType("Text")
                        .HasColumnName("name");

                    b.Property<int?>("To")
                        .HasColumnType("int")
                        .HasColumnName("to");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int")
                        .HasColumnName("user_profile_id");

                    b.HasKey("Id")
                        .HasName("pk_educations");

                    b.HasIndex("UserProfileId")
                        .HasDatabaseName("ix_educations_user_profile_id");

                    b.ToTable("educations");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.Exhibition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("From")
                        .HasColumnType("Date")
                        .HasColumnName("from");

                    b.Property<string>("Name")
                        .HasColumnType("Text")
                        .HasColumnName("name");

                    b.Property<string>("Place")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasColumnName("place");

                    b.Property<DateTime?>("To")
                        .HasColumnType("Date")
                        .HasColumnName("to");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int")
                        .HasColumnName("user_profile_id");

                    b.HasKey("Id")
                        .HasName("pk_exhibitions");

                    b.HasIndex("UserProfileId")
                        .HasDatabaseName("ix_exhibitions_user_profile_id");

                    b.ToTable("exhibitions");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Height")
                        .HasColumnType("int")
                        .HasColumnName("height");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.Property<int?>("Width")
                        .HasColumnType("int")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.ToTable("files");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtworkId")
                        .HasColumnType("int")
                        .HasColumnName("artwork_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_likes");

                    b.HasIndex("ArtworkId")
                        .HasDatabaseName("ix_likes_artwork_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_likes_user_id");

                    b.ToTable("likes");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bas"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Portfolio"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Portfolio Premium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Staff"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Staff"
                        });
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.Story", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(8192)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("Exhibition")
                        .HasColumnType("bit")
                        .HasColumnName("exhibition");

                    b.Property<int>("PrimaryFileId")
                        .HasColumnType("int")
                        .HasColumnName("primary_file_id");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("public_id");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2")
                        .HasColumnName("published");

                    b.Property<int?>("SecondaryFileId")
                        .HasColumnType("int")
                        .HasColumnName("secondary_file_id");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("slug");

                    b.Property<int?>("TertiaryFileId")
                        .HasColumnType("int")
                        .HasColumnName("tertiary_file_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(240)
                        .HasColumnType("nvarchar(240)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_stories");

                    b.HasIndex("PrimaryFileId")
                        .IsUnique()
                        .HasDatabaseName("ix_stories_primary_file_id");

                    b.HasIndex("PublicId")
                        .HasDatabaseName("ix_stories_public_id");

                    b.HasIndex("SecondaryFileId")
                        .IsUnique()
                        .HasDatabaseName("ix_stories_secondary_file_id")
                        .HasFilter("[secondary_file_id] IS NOT NULL");

                    b.HasIndex("TertiaryFileId")
                        .IsUnique()
                        .HasDatabaseName("ix_stories_tertiary_file_id")
                        .HasFilter("[tertiary_file_id] IS NOT NULL");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_stories_user_id");

                    b.ToTable("stories");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiration_date");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("pk_subscriptions");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_subscriptions_product_id");

                    b.ToTable("subscriptions");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.ToTable("tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "oil"
                        },
                        new
                        {
                            Id = 2,
                            Title = "acrylic"
                        },
                        new
                        {
                            Id = 3,
                            Title = "aquarelle"
                        },
                        new
                        {
                            Id = 4,
                            Title = "mixed-media"
                        },
                        new
                        {
                            Id = 5,
                            Title = "ceramic"
                        },
                        new
                        {
                            Id = 6,
                            Title = "pencil"
                        },
                        new
                        {
                            Id = 7,
                            Title = "charcoal"
                        },
                        new
                        {
                            Id = 8,
                            Title = "clay"
                        },
                        new
                        {
                            Id = 9,
                            Title = "glass"
                        },
                        new
                        {
                            Id = 10,
                            Title = "textile"
                        },
                        new
                        {
                            Id = 11,
                            Title = "gouache"
                        },
                        new
                        {
                            Id = 12,
                            Title = "ink"
                        },
                        new
                        {
                            Id = 13,
                            Title = "impressionism"
                        },
                        new
                        {
                            Id = 14,
                            Title = "abstract"
                        },
                        new
                        {
                            Id = 15,
                            Title = "realism"
                        },
                        new
                        {
                            Id = 16,
                            Title = "surrealism"
                        },
                        new
                        {
                            Id = 17,
                            Title = "expressionism"
                        },
                        new
                        {
                            Id = 18,
                            Title = "cubism"
                        },
                        new
                        {
                            Id = 19,
                            Title = "pop-art"
                        },
                        new
                        {
                            Id = 20,
                            Title = "documentary-photography"
                        },
                        new
                        {
                            Id = 21,
                            Title = "photorealism"
                        },
                        new
                        {
                            Id = 22,
                            Title = "abstract-expressionism"
                        },
                        new
                        {
                            Id = 23,
                            Title = "graffiti"
                        },
                        new
                        {
                            Id = 24,
                            Title = "portraiture"
                        },
                        new
                        {
                            Id = 25,
                            Title = "arts-craft"
                        },
                        new
                        {
                            Id = 26,
                            Title = "conceptual"
                        },
                        new
                        {
                            Id = 27,
                            Title = "street-art"
                        },
                        new
                        {
                            Id = 28,
                            Title = "still-life"
                        },
                        new
                        {
                            Id = 29,
                            Title = "landscape"
                        },
                        new
                        {
                            Id = 30,
                            Title = "pastel"
                        },
                        new
                        {
                            Id = 31,
                            Title = "animal"
                        },
                        new
                        {
                            Id = 32,
                            Title = "collage"
                        },
                        new
                        {
                            Id = 33,
                            Title = "drawing"
                        },
                        new
                        {
                            Id = 34,
                            Title = "architecture"
                        },
                        new
                        {
                            Id = 35,
                            Title = "nature"
                        },
                        new
                        {
                            Id = 36,
                            Title = "fashion"
                        },
                        new
                        {
                            Id = 37,
                            Title = "geometric"
                        },
                        new
                        {
                            Id = 38,
                            Title = "flowers"
                        },
                        new
                        {
                            Id = 39,
                            Title = "fantasy"
                        },
                        new
                        {
                            Id = 40,
                            Title = "pattern"
                        },
                        new
                        {
                            Id = 41,
                            Title = "celebrity"
                        },
                        new
                        {
                            Id = 42,
                            Title = "pop-culture"
                        },
                        new
                        {
                            Id = 43,
                            Title = "minimalism"
                        },
                        new
                        {
                            Id = 44,
                            Title = "figurative"
                        },
                        new
                        {
                            Id = 45,
                            Title = "places"
                        },
                        new
                        {
                            Id = 46,
                            Title = "politics"
                        },
                        new
                        {
                            Id = 47,
                            Title = "water"
                        },
                        new
                        {
                            Id = 48,
                            Title = "big-city"
                        },
                        new
                        {
                            Id = 49,
                            Title = "seasons"
                        },
                        new
                        {
                            Id = 50,
                            Title = "cats"
                        },
                        new
                        {
                            Id = 51,
                            Title = "dogs"
                        },
                        new
                        {
                            Id = 52,
                            Title = "nude"
                        },
                        new
                        {
                            Id = 53,
                            Title = "travel"
                        },
                        new
                        {
                            Id = 54,
                            Title = "food-drink"
                        },
                        new
                        {
                            Id = 55,
                            Title = "seascape"
                        },
                        new
                        {
                            Id = 56,
                            Title = "photography"
                        },
                        new
                        {
                            Id = 57,
                            Title = "sculpture"
                        },
                        new
                        {
                            Id = 58,
                            Title = "digital"
                        },
                        new
                        {
                            Id = 59,
                            Title = "illustration"
                        },
                        new
                        {
                            Id = 60,
                            Title = "video-art"
                        },
                        new
                        {
                            Id = 61,
                            Title = "performance-art"
                        },
                        new
                        {
                            Id = 62,
                            Title = "triptych"
                        },
                        new
                        {
                            Id = 63,
                            Title = "installation"
                        },
                        new
                        {
                            Id = 64,
                            Title = "mural"
                        },
                        new
                        {
                            Id = 65,
                            Title = "art-exhibition"
                        },
                        new
                        {
                            Id = 66,
                            Title = "gallery"
                        },
                        new
                        {
                            Id = 67,
                            Title = "group-exhibition"
                        },
                        new
                        {
                            Id = 68,
                            Title = "posters"
                        },
                        new
                        {
                            Id = 69,
                            Title = "artwork"
                        },
                        new
                        {
                            Id = 70,
                            Title = "print"
                        },
                        new
                        {
                            Id = 71,
                            Title = "jewelry"
                        },
                        new
                        {
                            Id = 72,
                            Title = "graphic"
                        });
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CoverPhotoFileId")
                        .HasColumnType("int")
                        .HasColumnName("cover_photo_file_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)")
                        .HasColumnName("email");

                    b.Property<int?>("FileId")
                        .HasColumnType("int")
                        .HasColumnName("file_id");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("language")
                        .HasComment("According to the ISO 639-1 standard");

                    b.Property<bool>("MonthlyUser")
                        .HasColumnType("bit")
                        .HasColumnName("monthly_user");

                    b.Property<Guid>("SocialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("social_id");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("subscription_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CoverPhotoFileId")
                        .HasDatabaseName("ix_users_cover_photo_file_id");

                    b.HasIndex("FileId")
                        .HasDatabaseName("ix_users_file_id");

                    b.HasIndex("SubscriptionId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_subscription_id");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_users_username");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("Text")
                        .HasColumnName("about");

                    b.Property<string>("BehanceUrl")
                        .HasMaxLength(280)
                        .HasColumnType("nvarchar(280)")
                        .HasColumnName("behance_url");

                    b.Property<string>("City")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasColumnName("country");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("DribbleUrl")
                        .HasMaxLength(280)
                        .HasColumnType("nvarchar(280)")
                        .HasColumnName("dribble_url");

                    b.Property<string>("FacebookUrl")
                        .HasMaxLength(280)
                        .HasColumnType("nvarchar(280)")
                        .HasColumnName("facebook_url");

                    b.Property<string>("Headline")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasColumnName("headline");

                    b.Property<bool>("HideLikedArtworks")
                        .HasColumnType("bit")
                        .HasColumnName("hide_liked_artworks");

                    b.Property<string>("InspiredBy")
                        .HasColumnType("Text")
                        .HasColumnName("inspired_by");

                    b.Property<string>("InstagramUrl")
                        .HasMaxLength(280)
                        .HasColumnType("nvarchar(280)")
                        .HasColumnName("instagram_url");

                    b.Property<string>("LinkedInUrl")
                        .HasMaxLength(280)
                        .HasColumnType("nvarchar(280)")
                        .HasColumnName("linked_in_url");

                    b.Property<string>("Location")
                        .HasMaxLength(280)
                        .HasColumnType("nvarchar(280)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasColumnName("name");

                    b.Property<string>("State")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasColumnName("state");

                    b.Property<string>("StudioLocation")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasColumnName("studio_location");

                    b.Property<string>("StudioText")
                        .HasMaxLength(280)
                        .HasColumnType("nvarchar(280)")
                        .HasColumnName("studio_text");

                    b.Property<string>("Surname")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasColumnName("surname");

                    b.Property<string>("Technique")
                        .HasColumnType("Text")
                        .HasColumnName("technique");

                    b.Property<string>("Title")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Website")
                        .HasMaxLength(280)
                        .HasColumnType("nvarchar(280)")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("pk_user_profiles");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_profiles_user_id");

                    b.ToTable("user_profiles");
                });

            modelBuilder.Entity("ArtworkTag", b =>
                {
                    b.Property<int>("ArtworksId")
                        .HasColumnType("int")
                        .HasColumnName("artworks_id");

                    b.Property<int>("TagsId")
                        .HasColumnType("int")
                        .HasColumnName("tags_id");

                    b.HasKey("ArtworksId", "TagsId")
                        .HasName("pk_artwork_tag");

                    b.HasIndex("TagsId")
                        .HasDatabaseName("ix_artwork_tag_tags_id");

                    b.ToTable("artwork_tag");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.Artwork", b =>
                {
                    b.HasOne("Artportable.API.Entities.Models.File", "PrimaryFile")
                        .WithOne("PrimaryFileRef")
                        .HasForeignKey("Artportable.API.Entities.Models.Artwork", "PrimaryFileId")
                        .HasConstraintName("fk_artworks_files_primary_file_id");

                    b.HasOne("Artportable.API.Entities.Models.File", "SecondaryFile")
                        .WithOne("SecondaryFileRef")
                        .HasForeignKey("Artportable.API.Entities.Models.Artwork", "SecondaryFileId")
                        .HasConstraintName("fk_artworks_files_secondary_file_id");

                    b.HasOne("Artportable.API.Entities.Models.File", "TertiaryFile")
                        .WithOne("TertiaryFileRef")
                        .HasForeignKey("Artportable.API.Entities.Models.Artwork", "TertiaryFileId")
                        .HasConstraintName("fk_artworks_files_tertiary_file_id");

                    b.HasOne("Artportable.API.Entities.Models.User", "User")
                        .WithMany("Artworks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_artworks_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryFile");

                    b.Navigation("SecondaryFile");

                    b.Navigation("TertiaryFile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.Connection", b =>
                {
                    b.HasOne("Artportable.API.Entities.Models.User", "Followee")
                        .WithMany("FolloweeRef")
                        .HasForeignKey("FolloweeId")
                        .HasConstraintName("fk_connections_users_followee_id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Artportable.API.Entities.Models.User", "Follower")
                        .WithMany("FollowerRef")
                        .HasForeignKey("FollowerId")
                        .HasConstraintName("fk_connections_users_follower_id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Followee");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.Education", b =>
                {
                    b.HasOne("Artportable.API.Entities.Models.UserProfile", "UserProfile")
                        .WithMany("Educations")
                        .HasForeignKey("UserProfileId")
                        .HasConstraintName("fk_educations_user_profiles_user_profile_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.Exhibition", b =>
                {
                    b.HasOne("Artportable.API.Entities.Models.UserProfile", "UserProfile")
                        .WithMany("Exhibitions")
                        .HasForeignKey("UserProfileId")
                        .HasConstraintName("fk_exhibitions_user_profiles_user_profile_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.Like", b =>
                {
                    b.HasOne("Artportable.API.Entities.Models.Artwork", "Artwork")
                        .WithMany("Likes")
                        .HasForeignKey("ArtworkId")
                        .HasConstraintName("fk_likes_artworks_artwork_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Artportable.API.Entities.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_likes_users_user_id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.Story", b =>
                {
                    b.HasOne("Artportable.API.Entities.Models.File", "PrimaryFile")
                        .WithOne("PrimaryFileReference")
                        .HasForeignKey("Artportable.API.Entities.Models.Story", "PrimaryFileId")
                        .HasConstraintName("fk_stories_files_primary_file_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Artportable.API.Entities.Models.File", "SecondaryFile")
                        .WithOne("SecondaryFileReference")
                        .HasForeignKey("Artportable.API.Entities.Models.Story", "SecondaryFileId")
                        .HasConstraintName("fk_stories_files_secondary_file_id");

                    b.HasOne("Artportable.API.Entities.Models.File", "TertiaryFile")
                        .WithOne("TertiaryFileReference")
                        .HasForeignKey("Artportable.API.Entities.Models.Story", "TertiaryFileId")
                        .HasConstraintName("fk_stories_files_tertiary_file_id");

                    b.HasOne("Artportable.API.Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_stories_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryFile");

                    b.Navigation("SecondaryFile");

                    b.Navigation("TertiaryFile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.Subscription", b =>
                {
                    b.HasOne("Artportable.API.Entities.Models.Product", "Product")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_subscriptions_products_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.User", b =>
                {
                    b.HasOne("Artportable.API.Entities.Models.File", "CoverPhotoFile")
                        .WithMany()
                        .HasForeignKey("CoverPhotoFileId")
                        .HasConstraintName("fk_users_files_cover_photo_file_id");

                    b.HasOne("Artportable.API.Entities.Models.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .HasConstraintName("fk_users_files_file_id");

                    b.HasOne("Artportable.API.Entities.Models.Subscription", "Subscription")
                        .WithOne("User")
                        .HasForeignKey("Artportable.API.Entities.Models.User", "SubscriptionId")
                        .HasConstraintName("fk_users_subscriptions_subscription_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoverPhotoFile");

                    b.Navigation("File");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.UserProfile", b =>
                {
                    b.HasOne("Artportable.API.Entities.Models.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("Artportable.API.Entities.Models.UserProfile", "UserId")
                        .HasConstraintName("fk_user_profiles_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtworkTag", b =>
                {
                    b.HasOne("Artportable.API.Entities.Models.Artwork", null)
                        .WithMany()
                        .HasForeignKey("ArtworksId")
                        .HasConstraintName("fk_artwork_tag_artworks_artworks_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Artportable.API.Entities.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .HasConstraintName("fk_artwork_tag_tags_tags_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.Artwork", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.File", b =>
                {
                    b.Navigation("PrimaryFileRef");

                    b.Navigation("PrimaryFileReference");

                    b.Navigation("SecondaryFileRef");

                    b.Navigation("SecondaryFileReference");

                    b.Navigation("TertiaryFileRef");

                    b.Navigation("TertiaryFileReference");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.Product", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.Subscription", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.User", b =>
                {
                    b.Navigation("Artworks");

                    b.Navigation("FolloweeRef");

                    b.Navigation("FollowerRef");

                    b.Navigation("Likes");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Artportable.API.Entities.Models.UserProfile", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Exhibitions");
                });
#pragma warning restore 612, 618
        }
    }
}
